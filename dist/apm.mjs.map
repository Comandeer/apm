{"version":3,"file":"apm.mjs","sources":["../src/utilities.js","../src/detectPackageManager.js"],"sourcesContent":["import { readdir } from 'node:fs/promises';\nimport { resolve as resolvePath } from 'node:path';\n\nasync function findFile( fileName, startDir, {\n\tendDir = '/'\n} = {} ) {\n\tconst files = await readdir( startDir );\n\n\tif ( files.includes( fileName ) ) {\n\t\treturn resolvePath( startDir, fileName );\n\t}\n\n\tif ( startDir === endDir ) {\n\t\treturn null;\n\t}\n\n\tconst dirUp = resolvePath( startDir, '..' );\n\n\t// If directory one level up is the same as the current on,\n\t// we're at / and there's nowhere to go up.\n\tif ( dirUp === startDir ) {\n\t\treturn null;\n\t}\n\n\treturn findFile( fileName, dirUp, {\n\t\tendDir\n\t} );\n}\n\nfunction parsePackageManagerField( packageManager ) {\n\tconst [ name, version ] = packageManager.split( '@' );\n\n\treturn {\n\t\tname,\n\t\tversion\n\t};\n}\n\nexport { findFile };\nexport { parsePackageManagerField };\n","import { readFile } from 'node:fs/promises';\nimport { dirname } from 'node:path';\nimport { findFile } from './utilities.js';\nimport { parsePackageManagerField } from './utilities.js';\n\nconst fallback = {\n\tname: 'npm',\n\tmethod: 'fallback'\n};\n\nasync function detectPackageManager( path ) {\n\tconst packageJSONPath = await findFile( 'package.json', path );\n\n\tif ( !packageJSONPath ) {\n\t\treturn fallback;\n\t}\n\n\tconst packageJSONContent = await readFile( packageJSONPath, 'utf8' );\n\tconst packageJSON = JSON.parse( packageJSONContent );\n\n\tif ( packageJSON.packageManager ) {\n\t\tconst { name } = parsePackageManagerField( packageJSON.packageManager );\n\n\t\treturn {\n\t\t\tname,\n\t\t\tmethod: 'packageManager'\n\t\t};\n\t}\n\n\tconst projectRoot = dirname( packageJSONPath );\n\tconst npmLockFilePath = await findFile( 'package-lock.json', path, {\n\t\tendDir: projectRoot\n\t} );\n\n\tif ( npmLockFilePath ) {\n\t\treturn {\n\t\t\tname: 'npm',\n\t\t\tmethod: 'lock-file'\n\t\t};\n\t}\n\n\tconst pnpmLockFilePath = await findFile( 'pnpm-lock.yaml', path, {\n\t\tendDir: projectRoot\n\t} );\n\n\tif ( pnpmLockFilePath ) {\n\t\treturn {\n\t\t\tname: 'pnpm',\n\t\t\tmethod: 'lock-file'\n\t\t};\n\t}\n\n\tconst yarnLockFilePath = await findFile( 'yarn.lock', path, {\n\t\tendDir: projectRoot\n\t} );\n\n\tif ( yarnLockFilePath ) {\n\t\treturn {\n\t\t\tname: 'yarn',\n\t\t\tmethod: 'lock-file'\n\t\t};\n\t}\n\n\treturn fallback;\n}\n\nexport default detectPackageManager;\n"],"names":["async","findFile","fileName","startDir","endDir","readdir","includes","resolvePath","dirUp","fallback","name","method","detectPackageManager","path","packageJSONPath","packageJSONContent","readFile","packageJSON","JSON","parse","packageManager","version","split","parsePackageManagerField","projectRoot","dirname"],"mappings":";0GAGAA,eAAeC,EAAUC,EAAUC,GAAUC,OAC5CA,EAAS,KACN,IAGH,UAFoBC,EAASF,IAElBG,SAAUJ,GACpB,OAAOK,EAAaJ,EAAUD,GAG/B,GAAKC,IAAaC,EACjB,OAAO,KAGR,MAAMI,EAAQD,EAAaJ,EAAU,MAIrC,OAAKK,IAAUL,EACP,KAGDF,EAAUC,EAAUM,EAAO,CACjCJ,WCpBF,MAAMK,EAAW,CAChBC,KAAM,MACNC,OAAQ,YAGTX,eAAeY,EAAsBC,GACpC,MAAMC,QAAwBb,EAAU,eAAgBY,GAExD,IAAMC,EACL,OAAOL,EAGR,MAAMM,QAA2BC,EAAUF,EAAiB,QACtDG,EAAcC,KAAKC,MAAOJ,GAEhC,GAAKE,EAAYG,eAAiB,CACjC,MAAMV,KAAEA,GDQV,SAAmCU,GAClC,MAAQV,EAAMW,GAAYD,EAAeE,MAAO,KAEhD,MAAO,CACNZ,OACAW,WCbiBE,CAA0BN,EAAYG,gBAEvD,MAAO,CACNV,OACAC,OAAQ,kBAIV,MAAMa,EAAcC,EAASX,GAK7B,SAJ8Bb,EAAU,oBAAqBY,EAAM,CAClET,OAAQoB,IAIR,MAAO,CACNd,KAAM,MACNC,OAAQ,aAQV,SAJ+BV,EAAU,iBAAkBY,EAAM,CAChET,OAAQoB,IAIR,MAAO,CACNd,KAAM,OACNC,OAAQ,aAQV,aAJ+BV,EAAU,YAAaY,EAAM,CAC3DT,OAAQoB,IAID,CACNd,KAAM,OACNC,OAAQ,aAIHF"}